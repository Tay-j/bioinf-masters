x=2*pi/3
test=sin(2*x)>cos(x)
test
pi/2
2pi/3
5*pi/6
2*pi/3
3*pi/4
x=3*pi/4
test
x=pi/2+pi/6
test
x=pi/2
test
test=sin(2*x)>cos(x)
test <- function(x){sin(2*x)>cos(x)}
test(pi/2)
test(3*pi/2)
test(pi)
test(2*pi/3)
test(pi/2+pi/6)
test(pi/2+pi/12)
test(pi-pi/6)
test(pi-pi/4)
test(pi-pi/6)
test(5*pi/6)
test(pi+pi/6)
test(pi+pi/4)
test(pi+pi/4)
test(3*pi/2)
test(3*pi/2+pi/6)
test(3*pi/2-pi/6)
test(3*pi/2-pi/4)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
setwd("~/John/University/Master/Year 2/Statistics/Assignments")
df <- read.delim("quiz.txt",header=FALSE,col.names="Border Length")
rs <- c(1, 1, 2, 3, 1, 2, 1, 3, 2, 2, 2, 1, 3, 1, 3, 1, 1, 2, 1, 2)
$\theta
mean(rs)
n <- length(rs)
p.hat <- sum(rs)/n
sqrt(p.hat*(1-p.hat)/n)
p.hat
p.hat*(1-p.hat)
p.hat*(1-p.hat)/n
qbinom(0.975)
0.9-qnorm(0.975)
qbinom(0.975,100,0.9)
qbinom(0.975,10,0.9)
p <- 0.9
n <- 100
prop.test(p,n,0.95)
b.test <- prop.test(p,n,0.95)
b.test$conf.int
b.test$conf.int[1]
b.test$conf.int[2]-b.test$conf.int[2]
b.test$conf.int[2]
b.test$conf.int[2]-b.test$conf.int[1]
b.test
rbinom(100,50,0.9)
rbinom(100,10,0.9)
rbinom(100,1,0.9)
var(rbinom(100,1,0.9))
var(rbinom(1000,1,0.9))
var(rbinom(10000,1,0.9))
(1.96*var(rbinom(1000,1,0.9))/5)^2
(1.96*var(rbinom(1000,1,0.9))/5)
(1.96*sqrt(var(rbinom(1000,1,0.9)))/5)^2
p <- 0.9
n <- 100
b.test <- prop.test(p,n,0.95)
b.test
p <- 0.9
n <- 100
b.test <- prop.test(p,n,0.95)
b.test
p <- 0.9
n <- 1000
b.test <- prop.test(p,n,0.95)
b.test$conf.int
error <- qbinom(0.975)*sqrt(1/n)*p*(1-p)
p <- 0.9
n <- 100
error <- qbinom(0.975)*sqrt(1/n)*p*(1-p)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
error
p+error
p-error
left.b <- p-error
right.b <- p+error
n <- 100
b.test <- prop.test(p,n,0.95)
b.test
p + c(-qnorm(0.975),qnorm(0.975))*sqrt((1/1000)*p*(1-p))
width <- right-left
width <- right.b-left.b
width
p <- 0.9
n <- 1000
#b.test <- prop.test(p,n,0.95)
error <- qbinom(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
p <- 0.9
n <- 1000
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 50
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 49
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 100
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 200
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 300
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 320
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 310
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 309
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 308
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 311
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 312
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 49
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- 2*(right.b-left.b)
width
p <- 0.9
n <- 100
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 49
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- 2*(right.b-left.b)
width
n <- 49
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 60
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 80
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 77
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
```{r, echo=FALSE}
n <- 78
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
n <- 78
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 79
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 81
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
n <- 85
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 30
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 20
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 10
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 11
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 12
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
p <- 0.9
n <- 13
#b.test <- prop.test(p,n,0.95)
error <- qnorm(0.975)*sqrt(1/n)*p*(1-p)
left.b <- p-error
right.b <- p+error
width <- right.b-left.b
width
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
setwd("~/John/University/Master/Year 2/Statistics/Assignments")
data(Animals, package = "MASS")
Animals
summary(Anim)
summary(Animals)
plot(Animals$body)
plot(Animals$brain)
plot(Animals$body)
par(mfrow(2,1))
par(mfrow=c(2,1))
plot(Animals$body)
plot(Animals$brain)
animals<-lm(log(Animals))
animals$fitted.values
summary(animals)
plot(animals$residuals)
plot(Animals$body,Animals$brain)
plot(log(Animals$body),Animals$brain)
plot(log(Animals$body),log(Animals$brain))
animals$coefficients
plot(log(Animals$body),log(Animals$brain),x="Body Weight Index",y="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients)
plot(log(Animals$body),log(Animals$brain),x="Body Weight Index",y="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients[1],animals$coefficients[2])
plot(log(Animals$body),log(Animals$brain),x="Body Weight Index",y="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
plot(log(Animals$body),log(Animals$brain))
plot(log(Animals$body),log(Animals$brain),xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients[1],animals$coefficients[2])
plot(animals$residuals,xlab="Animal Index",ylab="Residuals",main="Residuals of Animals Linear Regression")
animals
summary animals
animals$coefficients
Animals
View(Animals)
View(Animals)
new.animals <- animals[-c(6,16,26),]
animals
new.Animals <- Animals[-c(6,16,26),]
new.animals <- lm(log(new.Animals))
new.Animals <- Animals[-c(6,16,26),]
new.animals <- lm(log(new.Animals))
plot(log(new.Animals$body),log(new.Animals$brain),xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(new.animals$coefficients[1],new.animals$coefficients[2])
plot(new.animals$residuals,xlab="Animal Index",ylab="Residuals",main="Residuals of Animals Linear Regression")
plot(log(new.Animals$body),log(new.Animals$brain),xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(new.animals$coefficients[1],new.animals$coefficients[2])
plot(log(Animals$body),log(Animals$brain),xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
plot(Animals$body,Animals$brain,xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients[1],animals$coefficients[2])
plot(new.Animals$body,new.Animals$brain,xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(new.animals$coefficients[1],new.animals$coefficients[2])]
abline(new.animals$coefficients[1],new.animals$coefficients[2])
n <- nrow(Animals)
RSS <- sum(animals$residuals^2)
par(mfrow = c(1, 2))
plot(animals,1:2)
new.Animals <- Animals[-c(6,16,26),]
new.animals <- lm(log(new.Animals))
par(mfrow = c(1, 2))
plot(new.animals,2:1)
plot(log(Animals$body),log(Animals$brain),xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")\
plot(log(Animals$body),log(Animals$brain),xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients[1],animals$coefficients[2])
par(mfrow = c(1, 1))
plot(log(Animals$body),log(Animals$brain),xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients[1],animals$coefficients[2])
new.Animals <- Animals[-c(6,16,26),]
new.animals <- lm(new.Animals)
par(mfrow = c(1, 2))
plot(new.animals,2:1)
par(mfrow = c(1, 1))
plot(Animals$body,Animals$brain,xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients[1],animals$coefficients[2])
new.Animals <- Animals[-c(6,16,26),]
new.animals <- lm(new.Animals)
par(mfrow = c(1, 2))
plot(new.animals,2:1)
par(mfrow = c(1, 2))
plot(animals,2:1)
plot(new.animals,2:1)
par(mfrow = c(1, 1))
plot(Animals$body,Animals$brain,xlab="Body Weight Index",ylab="Brain Weight Index",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients[1],animals$coefficients[2])
par(mfrow = c(1, 1))
plot(Animals$body,Animals$brain,xlab="Body Weight",ylab="Brain Weight",main="Fitted Line of Animal Body Weight vs Brain Weight")
abline(animals$coefficients[1],animals$coefficients[2])
View(Animals)
predict(new.animals,500,interval = "confidence")
predict(new.animals,data.frame(single=500),interval = "confidence")
predict(new.animals,data.frame(single=500),interval = "confidence")
new.animals
predictlm(new.animals,data.frame(single=500),interval = "confidence")
predict.lm(new.animals,data.frame(single=500),interval = "confidence")
predict(new.animals,data.frame(single=500),interval = "confidence")
predict(new.animals,data.frame(body=500),interval = "confidence")
predict(new.animals,data.frame(brain=500),interval = "confidence")
predict(new.animals,data.frame(body=500),interval = "confidence")
predict(new.animals,data.frame(brain=500),interval = "confidence")
predict(new.animals,data.frame(body=500),interval = "confidence")
ci <- predict(new.animals,data.frame(body=500),interval = "confidence")\
ci <- predict(new.animals,data.frame(body=500),interval = "confidence")
ci <- predict(new.animals,data.frame(500),interval = "confidence")
new.animals
View(Animals)
ci <- predict(new.animals,data.frame(Intercept=500),interval = "confidence")
ci <- predict(new.animals,data.frame((Intercept)=500),interval = "confidence")
new.animals$coefficients
ci <- predict(new.animals,data.frame("(Intercept)"=500),interval = "confidence")
abline(500)
abline(0,500)
predict(animals,data.frame(body=500),interval = "confidence")
View(Animals)
animals<-lm(log(body~brain),data=Animals)
animals<-lm(log(body)~log(brain),data=Animals)
summary(animals)
animals<-lm(log(Animals))
summary(animals)
new.animals <- lm(body~brain,data=new.Animals)
par(mfrow = c(1, 2))
plot(new.animals,2:1)
predict(new.animals,data.frame(body=500),interval = "confidence")
animals<-lm(log(Animals))
summary(animals)
par(mfrow = c(1, 2))
plot(animals,2:1)
new.Animals <- Animals[-c(6,16,26),]
new.animals <- lm(new.Animals)
par(mfrow = c(1, 2))
plot(new.animals,2:1)
flip.animals <- lm(brain~body,data=new.Animals)
ci <- predict(flip.animals,data.frame(body=500),interval = "confidence",)
ci
flip.animals
ci <- predict(new.animals,data.frame(brain=500),interval = "confidence")
ci
ci[1]
predict(new.animals,newdata = p,interval = "confidence")
predict(new.animals,newdata = 500,interval = "confidence")
predict(new.animals,data.frame(brain=500))
iinstall.packages("babette")
install.packages("babette")
BiocManager::available()
install.packages("babette",repos=NULL)
devtools::install_github("ropensci/babette")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(MASS)
library(devtools)
install.packages("devtools.zip", repos = NULL)
install.packages("devtools")
install.packages("devtools.zip", repos = NULL)
devtools::install_github("r-lib/devtools")
install.packages("devtools")
install.packages("devtools,type="win.binary")
install.packages("devtools",type="win.binary")
library(devtools)
install.packages("devtools",type="win.binary")
library(devtools)
install.packages("processx")
library(devtools)
install_github("ropensci/babette")
library(babette)
setwd("~/GitHub/bioinf-masters/CSIRO")
out <- create_beast2_input("australian_H7.fasta",
tree_prior = create_tree_prior_cep())
out
input_file <- "australian_H7.fasta"
paste(input_file,".xml")
paste(input_file,".xml",sep=NULL)
paste0(input_file,".xml")
write(out,paste0(input_file,".xml"))
input_file <- "australian_H7_aligned.fasta"
out <- create_beast2_input("australian_H7.fasta",
tree_prior = create_tree_prior_cep())
write(out,paste0(input_file,".xml"))
input_file <- "australian_H7_aligned.fasta"
out <- create_beast2_input(input_file,
tree_prior = create_tree_prior_cep())
write(out,paste0(input_file,".xml"))
out <- create_beast2_input(input_file,
tree_prior = create_tree_prior_cep(),
clock_model = create_clock_model_rln())
write(out,paste0(input_file,".xml"))
